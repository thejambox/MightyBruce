<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///controls
UP = vk_up
LEFT = vk_left
DOWN = vk_down
RIGHT = vk_right
JUMP = vk_up
SHOOT = vk_space
dead_zone = 0.4
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set vars
_speed = 4  
_jump = -12
rot = 0
_flip = 0
_flip_speed = 17

//weapons
weapon = obj_bullet
global.last_weapon = 0
_s_weapon = s_pistol
_delay = 0
shoot_delay = 30
reload = 0
reload_delay = 0
weapon_offset = sprite_width/2
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dont get stuck
if place_meeting(x,y,obj_wall) room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0,0,obj_killscreen)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
var HSP,VSP;

//horizontal movement
var r = keyboard_check(RIGHT) || gamepad_button_check(0,gp_padr) || gamepad_axis_value(0,gp_axislh) &gt; dead_zone;
var l = keyboard_check(LEFT) || gamepad_button_check(0,gp_padl) || gamepad_axis_value(0,gp_axislh) &lt; -dead_zone;

HSP = (r-l)*_speed
if HSP != 0 {
        image_xscale = sign(HSP);
        image_speed = 0.4;
    }
    else{
        image_speed = 0;
        image_index = 0;
    }


//verticle movement
VSP = vspeed
var grounded = place_meeting(x,y+2,SOLID)
if !grounded VSP += global.GRAV else {VSP = global.vertSpeed;_flip = 0}

    //jumping
    var j = keyboard_check_pressed(UP) || keyboard_check_pressed(JUMP) || gamepad_button_check_pressed(0,gp_face1)|| gamepad_button_check_pressed(0,gp_face4);
    var notj = keyboard_check_released(UP) || keyboard_check_released(JUMP) || gamepad_button_check_released(0,gp_face1) || gamepad_button_check_released(0,gp_face4);
    if grounded &amp;&amp; j {VSP = _jump;_flip = _flip_speed}
    if (notj) &amp;&amp; VSP &lt; 0 VSP *= 0.3
    //rotation
    if grounded {
        rot = clamp(-HSP,-10,10)
    }else{
        rot += -_flip*image_xscale
    }


//collision detection
if place_meeting(x+HSP,y,SOLID){
    x = round(x)
    while (!place_meeting(x+sign(HSP),y,SOLID)) {x+=sign(HSP);}
    HSP = 0
}
if place_meeting(x,y+VSP,SOLID){
    y = round(y)
    while (!place_meeting(x,y+sign(VSP),SOLID)) {y+=sign(VSP);}
    VSP = global.vertSpeed
}


//finalise movement
hspeed = HSP
vspeed = VSP


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shooting
var s = keyboard_check(SHOOT) || 
gamepad_button_check(0,gp_face2) || 
gamepad_button_check(0,gp_face3) || 
gamepad_button_check(0,gp_shoulderr) || 
gamepad_button_check(0,gp_shoulderl)

if reload &gt; 0 reload -= 1

if s {
    if _delay = 0 &amp;&amp; reload &lt;= 0{
        var b;
        b = instance_create(x+(weapon_offset*image_xscale),y,weapon)
        b.hspeed = b._speed * image_xscale
        with b event_user(1)
        play_sound(_s_weapon)
        _delay = shoot_delay
        reload = reload_delay
    }
    _delay -= 1
}else{
    _delay = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///out room
if y &gt; room_height+48 instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///points
global.points += 1/room_speed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="FOE">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///die

var b,dir;
    dir = 90 - (sign(x - other.x)*35)
    b = part_type_create()
    part_type_sprite(b,sprite_index,0,0,1)
    part_type_speed(b,6,10,-0.1,0)
    part_type_direction(b,dir,dir,0,0)
    part_type_gravity(b,global.GRAV,270)
    part_type_life(b,60,60)
    part_type_color1(b,global.c[4])
    part_type_orientation(b,0,0,choose(-20,-10,10,20),0,0)
    
    part_particles_create(global.p_sys,x,y,b,1)
    
    part_particles_clear(b)
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw_self


var col = global.c[4];
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,rot,col,1)

//gun
draw_sprite_ext(spr_gun,global.last_weapon,x+(weapon_offset*image_xscale),y,image_xscale,image_yscale,0,global.c[3],1)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,12</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
